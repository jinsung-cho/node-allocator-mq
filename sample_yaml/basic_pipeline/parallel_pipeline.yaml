apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parallel-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.10, pipelines.kubeflow.org/pipeline_compilation_time: '2022-01-04T13:48:52.412682',
    pipelines.kubeflow.org/pipeline_spec: '{"name": "Parallel pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.10}
spec:
  entrypoint: parallel-pipeline
  templates:
  - name: for-loop-1
    inputs:
      parameters:
      - {name: generate-random-list-op-Output-loop-item}
    dag:
      tasks:
      - name: print-op
        template: print-op
        arguments:
          parameters:
          - {name: generate-random-list-op-Output-loop-item, value: '{{inputs.parameters.generate-random-list-op-Output-loop-item}}'}
  - name: generate-random-list-op
    container:
      args: ['----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def generate_random_list_op():
            import random

            total = random.randint(5, 10)
            result = [i for i in range(1, total)]

            return result

        def _serialize_json(obj) -> str:
            if isinstance(obj, str):
                return obj
            import json

            def default_serializer(obj):
                if hasattr(obj, 'to_struct'):
                    return obj.to_struct()
                else:
                    raise TypeError(
                        "Object of type '%s' is not JSON serializable and does not have .to_struct() method."
                        % obj.__class__.__name__)

            return json.dumps(obj, default=default_serializer, sort_keys=True)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random list op', description='')
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_list_op(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_json,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    outputs:
      parameters:
      - name: generate-random-list-op-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-list-op-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["----output-paths", {"outputPath": "Output"}], "command": ["sh",
          "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def generate_random_list_op():\n    import
          random\n\n    total = random.randint(5, 10)\n    result = [i for i in range(1,
          total)]\n\n    return result\n\ndef _serialize_json(obj) -> str:\n    if
          isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if
          hasattr(obj, ''to_struct''):\n            return obj.to_struct()\n        else:\n            raise
          TypeError(\n                \"Object of type ''%s'' is not JSON serializable
          and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return
          json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport argparse\n_parser
          = argparse.ArgumentParser(prog=''Generate random list op'', description='''')\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_list_op(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "name": "Generate random list op", "outputs": [{"name":
          "Output", "type": "JsonArray"}]}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: parallel-pipeline
    dag:
      tasks:
      - name: for-loop-1
        template: for-loop-1
        dependencies: [generate-random-list-op]
        arguments:
          parameters:
          - {name: generate-random-list-op-Output-loop-item, value: '{{item}}'}
        withParam: '{{tasks.generate-random-list-op.outputs.parameters.generate-random-list-op-Output}}'
      - {name: generate-random-list-op, template: generate-random-list-op}
  - name: print-op
    container:
      args: [--num, '{{inputs.parameters.generate-random-list-op-Output-loop-item}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_op(num):
            print(f"{num} is Generated!")

        import argparse
        _parser = argparse.ArgumentParser(prog='Print op', description='')
        _parser.add_argument("--num", dest="num", type=int, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_op(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: generate-random-list-op-Output-loop-item}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--num", {"inputValue": "num"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def print_op(num):\n    print(f\"{num} is Generated!\")\n\nimport argparse\n_parser
          = argparse.ArgumentParser(prog=''Print op'', description='''')\n_parser.add_argument(\"--num\",
          dest=\"num\", type=int, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "num", "type": "Integer"}],
          "name": "Print op"}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"num":
          "{{inputs.parameters.generate-random-list-op-Output-loop-item}}"}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
