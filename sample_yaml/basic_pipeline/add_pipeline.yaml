apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: add-example-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.10, pipelines.kubeflow.org/pipeline_compilation_time: '2022-01-03T16:30:39.993740',
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"name": "value_1", "type":
      "Integer"}, {"name": "value_2", "type": "Integer"}], "name": "add example"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.10}
spec:
  entrypoint: add-example
  templates:
  - name: add
    container:
      args: [--value-1, '{{inputs.parameters.value_1}}', --value-2, '{{inputs.parameters.value_2}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def add(value_1, value_2):

            ret = value_1 + value_2
            return ret

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(
                    str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Add', description='')
        _parser.add_argument("--value-1", dest="value_1", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--value-2", dest="value_2", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = add(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: value_1}
      - {name: value_2}
    outputs:
      parameters:
      - name: add-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: add-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--value-1", {"inputValue": "value_1"}, "--value-2", {"inputValue":
          "value_2"}, "----output-paths", {"outputPath": "Output"}], "command": ["sh",
          "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def add(value_1, value_2):\n\n    ret =
          value_1 + value_2\n    return ret\n\ndef _serialize_int(int_value: int)
          -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if
          not isinstance(int_value, int):\n        raise TypeError(''Value \"{}\"
          has type \"{}\" instead of int.''.format(\n            str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add'',
          description='''')\n_parser.add_argument(\"--value-1\", dest=\"value_1\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--value-2\",
          dest=\"value_2\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "value_1", "type": "Integer"},
          {"name": "value_2", "type": "Integer"}], "name": "Add", "outputs": [{"name":
          "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"value_1": "{{inputs.parameters.value_1}}",
          "value_2": "{{inputs.parameters.value_2}}"}'}
  - name: add-example
    inputs:
      parameters:
      - {name: value_1}
      - {name: value_2}
    dag:
      tasks:
      - name: add
        template: add
        arguments:
          parameters:
          - {name: value_1, value: '{{inputs.parameters.value_1}}'}
          - {name: value_2, value: '{{inputs.parameters.value_2}}'}
      - name: multiply
        template: multiply
        dependencies: [add, subtract]
        arguments:
          parameters:
          - {name: add-Output, value: '{{tasks.add.outputs.parameters.add-Output}}'}
          - {name: subtract-Output, value: '{{tasks.subtract.outputs.parameters.subtract-Output}}'}
      - name: subtract
        template: subtract
        arguments:
          parameters:
          - {name: value_1, value: '{{inputs.parameters.value_1}}'}
          - {name: value_2, value: '{{inputs.parameters.value_2}}'}
  - name: multiply
    container:
      args: [--value-1, '{{inputs.parameters.add-Output}}', --value-2, '{{inputs.parameters.subtract-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def multiply(value_1, value_2):
            ret = value_1 * value_2
            return ret

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(
                    str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Multiply', description='')
        _parser.add_argument("--value-1", dest="value_1", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--value-2", dest="value_2", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = multiply(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: add-Output}
      - {name: subtract-Output}
    outputs:
      artifacts:
      - {name: multiply-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--value-1", {"inputValue": "value_1"}, "--value-2", {"inputValue":
          "value_2"}, "----output-paths", {"outputPath": "Output"}], "command": ["sh",
          "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def multiply(value_1, value_2):\n    ret
          = value_1 * value_2\n    return ret\n\ndef _serialize_int(int_value: int)
          -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if
          not isinstance(int_value, int):\n        raise TypeError(''Value \"{}\"
          has type \"{}\" instead of int.''.format(\n            str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Multiply'',
          description='''')\n_parser.add_argument(\"--value-1\", dest=\"value_1\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--value-2\",
          dest=\"value_2\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = multiply(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "value_1", "type": "Integer"},
          {"name": "value_2", "type": "Integer"}], "name": "Multiply", "outputs":
          [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"value_1": "{{inputs.parameters.add-Output}}",
          "value_2": "{{inputs.parameters.subtract-Output}}"}'}
  - name: subtract
    container:
      args: [--value-1, '{{inputs.parameters.value_1}}', --value-2, '{{inputs.parameters.value_2}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def subtract(value_1, value_2):

            ret = value_1 - value_2
            return ret

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(
                    str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Subtract', description='')
        _parser.add_argument("--value-1", dest="value_1", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--value-2", dest="value_2", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = subtract(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: value_1}
      - {name: value_2}
    outputs:
      parameters:
      - name: subtract-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: subtract-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--value-1", {"inputValue": "value_1"}, "--value-2", {"inputValue":
          "value_2"}, "----output-paths", {"outputPath": "Output"}], "command": ["sh",
          "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def subtract(value_1, value_2):\n\n    ret
          = value_1 - value_2\n    return ret\n\ndef _serialize_int(int_value: int)
          -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if
          not isinstance(int_value, int):\n        raise TypeError(''Value \"{}\"
          has type \"{}\" instead of int.''.format(\n            str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Subtract'',
          description='''')\n_parser.add_argument(\"--value-1\", dest=\"value_1\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--value-2\",
          dest=\"value_2\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = subtract(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "value_1", "type": "Integer"},
          {"name": "value_2", "type": "Integer"}], "name": "Subtract", "outputs":
          [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"value_1": "{{inputs.parameters.value_1}}",
          "value_2": "{{inputs.parameters.value_2}}"}'}
  arguments:
    parameters:
    - {name: value_1}
    - {name: value_2}
  serviceAccountName: pipeline-runner
